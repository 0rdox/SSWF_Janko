// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations.AppDB
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20231006085025_TestingEnumName")]
    partial class TestingEnumName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Canteen", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<bool>("OffersHotMeals")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Canteens");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = 0,
                            Location = 0,
                            OffersHotMeals = false
                        },
                        new
                        {
                            ID = 2,
                            City = 2,
                            Location = 2,
                            OffersHotMeals = true
                        },
                        new
                        {
                            ID = 3,
                            City = 0,
                            Location = 1,
                            OffersHotMeals = true
                        });
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"));

                    b.Property<int>("Canteen")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeID = 1,
                            Canteen = 0,
                            Name = "Derek Stor"
                        },
                        new
                        {
                            EmployeeID = 2,
                            Canteen = 0,
                            Name = "Jenny Berk"
                        },
                        new
                        {
                            EmployeeID = 3,
                            Canteen = 2,
                            Name = "Sarah Lee"
                        },
                        new
                        {
                            EmployeeID = 4,
                            Canteen = 1,
                            Name = "Dom Peters"
                        });
                });

            modelBuilder.Entity("Domain.Models.Packet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Canteen")
                        .HasColumnType("int");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MaxDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OverEighteen")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("ReservedById")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservedById");

                    b.ToTable("Packets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Canteen = 0,
                            City = 0,
                            DateTime = new DateTime(2023, 10, 6, 10, 50, 25, 753, DateTimeKind.Local).AddTicks(5414),
                            ImageUrl = "https://rosco-catering.nl/wp-content/uploads/2020/06/Rosco-Catering-Bake-off-box-scaled.jpg",
                            MaxDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lekkere Broodjes",
                            OverEighteen = false,
                            Price = 8.99m,
                            ReservedById = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Canteen = 0,
                            City = 0,
                            DateTime = new DateTime(2023, 10, 6, 10, 50, 25, 753, DateTimeKind.Local).AddTicks(5462),
                            ImageUrl = "https://www.foodandwine.com/thmb/a3jODP_x_GpJpD71zT3t3BYbtp8=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/how-to-ship-wine-FT-BLOG1221-073f4b1897c34f04bff8ea71dadcba2c.jpg",
                            MaxDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Drankpakket",
                            OverEighteen = false,
                            Price = 14.99m,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Alcohol")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PacketID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacketID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alcohol = false,
                            ImageUrl = "https://www.hetzeilbergsbakkertje.nl/wp-content/uploads/JPM0008-Worstenbroodje-open.jpg",
                            Name = "Worstenbroodje"
                        },
                        new
                        {
                            Id = 2,
                            Alcohol = false,
                            ImageUrl = "https://www.bakkerijvoortman.nl/wp/wp-content/uploads/2015/02/saucbr..png",
                            Name = "Saucijzenbroodje"
                        },
                        new
                        {
                            Id = 3,
                            Alcohol = false,
                            ImageUrl = "https://www.ahealthylife.nl/wp-content/uploads/2021/06/Kaassouffle_voedingswaarde-1.jpg",
                            Name = "Kaassoufflé"
                        },
                        new
                        {
                            Id = 4,
                            Alcohol = false,
                            ImageUrl = "https://klokhoogeveen.nl/wordpress/wp-content/uploads/2019/04/frikandellenbroodje.png",
                            Name = "Frikandelbroodje"
                        },
                        new
                        {
                            Id = 5,
                            Alcohol = false,
                            ImageUrl = "https://i0.wp.com/www.frituurwereld.nl/wp-content/uploads/2020/10/Frituurwereld-Krokettendag-hoera.jpg?fit=1212%2C823&ssl=1",
                            Name = "Kroket"
                        },
                        new
                        {
                            Id = 6,
                            Alcohol = false,
                            ImageUrl = "https://s-marktscholte.nl/cmcc/wp-content/uploads/2019/01/Broodje-gezond-s-markt.jpg",
                            Name = "Pistoletje gezond"
                        },
                        new
                        {
                            Id = 7,
                            Alcohol = false,
                            ImageUrl = "https://us.123rf.com/450wm/kostrez/kostrez1509/kostrez150900011/44695927-tomatensoep-in-een-witte-kom-met-peterselie-en-specerijen-op-een-schotel-ge%C3%AFsoleerd-op-een-witte.jpg?ver=6",
                            Name = "Tomatensoep"
                        },
                        new
                        {
                            Id = 8,
                            Alcohol = false,
                            ImageUrl = "https://img.freepik.com/premium-photo/chocolade-op-witte-achtergrond_404043-1540.jpg",
                            Name = "Chocolade"
                        },
                        new
                        {
                            Id = 9,
                            Alcohol = false,
                            ImageUrl = "https://media.istockphoto.com/id/1251818705/photo/large-chocolate-chip-cookie-on-a-white-plate-with-a-white-background.jpg?s=612x612&w=0&k=20&c=vDhGIb54eGfIQKI1gfuDGp7j29ppw3ioTa-Wwwrg3Vc=",
                            Name = "Koekje"
                        },
                        new
                        {
                            Id = 10,
                            Alcohol = true,
                            ImageUrl = "https://thumbs.dreamstime.com/b/koud-bier-43280582.jpg",
                            Name = "Bier"
                        },
                        new
                        {
                            Id = 11,
                            Alcohol = true,
                            ImageUrl = "https://static.vecteezy.com/ti/gratis-vector/p3/7324461-wijnglazen-met-witte-wijn-illustratie-van-wijnglazen-geisoleerd-op-witte-achtergrond-gratis-vector.jpg",
                            Name = "Wijn"
                        },
                        new
                        {
                            Id = 12,
                            Alcohol = true,
                            ImageUrl = "https://img.freepik.com/premium-photo/glas-schotse-whisky-en-ijs-op-een-witte-achtergrond_38145-1376.jpg?w=2000",
                            Name = "Whisky"
                        },
                        new
                        {
                            Id = 13,
                            Alcohol = true,
                            ImageUrl = "https://media.istockphoto.com/id/671705556/photo/vodka-in-vintage-glass.jpg?s=612x612&w=0&k=20&c=Tz58z7MkbFq2ziaK92nid4KEp84T30pFlS6J6pAmI08=",
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = 14,
                            Alcohol = true,
                            ImageUrl = "https://img.freepik.com/premium-photo/cocktail-tequila-sunrise-front-white-background_118454-21367.jpg?w=2000",
                            Name = "Tequila Sunrise"
                        });
                });

            modelBuilder.Entity("Domain.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = 0,
                            DateOfBirth = new DateTime(2000, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Phone = "555-555-5555",
                            StudentNumber = 12345
                        },
                        new
                        {
                            Id = 2,
                            City = 2,
                            DateOfBirth = new DateTime(1998, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mike.evars@example.com",
                            Name = "Mike Evars",
                            Phone = "555-555-5555",
                            StudentNumber = 52341
                        },
                        new
                        {
                            Id = 3,
                            City = 0,
                            DateOfBirth = new DateTime(2001, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kaitlyn.marek@example.com",
                            Name = "Kaitlyn Marek",
                            Phone = "555-555-5555",
                            StudentNumber = 51221
                        });
                });

            modelBuilder.Entity("Domain.Models.Packet", b =>
                {
                    b.HasOne("Domain.Models.Student", "ReservedBy")
                        .WithMany("Reservations")
                        .HasForeignKey("ReservedById");

                    b.Navigation("ReservedBy");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Packet", "Packet")
                        .WithMany()
                        .HasForeignKey("PacketID");

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("Domain.Models.Student", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
